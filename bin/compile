#!/usr/bin/env bash

set -euo pipefail

export BUILD_DIR="$1"
export CACHE_DIR="$2"
export ENV_DIR="$3"

function log() {
    echo "-----> $*"
}

function indent() {
  sed -e 's/^/       /'
}

function warning() {
  local ansi_yellow='\033[1;33m'
  local ansi_reset='\033[0m'
  echo >&2
  while IFS= read -r line; do
    echo -e "${ansi_yellow} !    ${line}${ansi_reset}" >&2
  done
  echo >&2
}

BUILDPACK_VARIABLES="DISABLE_UV_CREATE_RUNTIME_FILE PYTHON_RUNTIME_VERSION"

shopt -s nullglob

for env_var in "$ENV_DIR"/UV_* ; do
  export "$(basename "$env_var")=$(cat "$env_var" 2>/dev/null)"
done

for env_var in $BUILDPACK_VARIABLES ; do
  [ -f "$ENV_DIR/$env_var" ] && export "$(basename "$env_var")=$(cat "$env_var" 2>/dev/null)"
done

UV_VERSION="${UV_VERSION:-}"

if [ -z "$UV_VERSION" ] ; then
  log "No uv version specified in the UV_VERSION config var. Defaulting to latest."
else
  log "Using uv version from UV_VERSION config var: $UV_VERSION"
fi

log "Install uv"

if [ -n "$UV_VERSION" ]; then
  UV_URL="https://astral.sh/uv/$UV_VERSION/install.sh"
else
   UV_URL="https://astral.sh/uv/install.sh"
fi

if ! curl -LsSf "$UV_URL" | sh ; then
  echo "Error: Failed to install uv."
  exit 1
fi

log "Add uv to the PATH"
export PATH="/app/.local/bin:$PATH"

log "Generate requirements.txt with uv"

REQUIREMENTS_FILE="requirements.txt"

log "Export $REQUIREMENTS_FILE from uv"

cd "$BUILD_DIR"

uv venv
source .venv/bin/activate
if [ "${UV_EXPORT_DEV_REQUIREMENTS:-0}" == "0" ] ; then
  uv sync --no-dev
else
  uv sync
fi
uv pip freeze > requirements.txt
